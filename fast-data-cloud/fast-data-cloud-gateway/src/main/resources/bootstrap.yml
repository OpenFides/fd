server:
  port: 9080
spring:
  application:
    name: gateway
  cloud:
    discovery:
      locator:
      enabled: true
      lower-case-service-id: true
    gateway:
      routes:
        # 路由规则的唯一标识，任意齐名，建议和服务名一致
        - id: sc-web-admin-back
          # 转发到的节点，lb:// 为 http，lb:ws:// 为 websocket
          uri: http://www.baidu.com
          predicates:
            # 断言规则，这里设置匹配的路由规则
            - Path=/search/**
          # 过滤规则
          filters:
            # 转发到具体项目去掉路由首单词，如 /search/a 转发为 /a
            - StripPrefix=1
    register:
      enabled: false
    consul:
      # Consul 服务器地址
      host: 10.168.4.14
      port: 8500

  #      # 配置中心相关配置
  #      config:
  #        enabled: false
  #        defaultContext: application
  #        # 是否启用配置中心，默认值 true 开启
  #        # 设置配置的基本文件夹，默认值 config 可以理解为配置文件所在的最外层文件夹
  #        prefix: config
  #        # 设置应用的文件夹名称，默认值 application 一般建议设置为微服务应用名称
  #        default-context: ${spring.application.name}
  #        # 配置环境分隔符，默认值 "," 和 default-context 配置项搭配
  #        # 例如应用 orderService 分别有环境 default、dev、test、prod
  #        # 只需在 config 文件夹下创建 orderService、orderService-dev、orderService-test、orderService-prod 文件夹即可
  #        profile-separator: '-'
  #        # Consul 的 Key/Values 中的 Key，Value 对应整个配置文件
  #        data-key: properties
  #        # 指定配置格式为 yaml
  #        format: YAML
  #        watch:
  #          # 是否开启自动刷新，默认值 true 开启
  #          enabled: false
  #          # 刷新频率，单位：毫秒，默认值 1000
  #          delay: 1000
  # 静态文件请求匹配方式
  mvc:
    static-path-pattern: /**
    # 修改默认的静态寻址资源目录 多个使用逗号分隔
    resources:
      static-locations: file:/,classpath:/META-INF/resources/,classpath:/resources/,classpath:/META-INF/resources/webjars/
#management:
#  endpoint:
#    gateway:
#      enabled: true # default value
#  endpoints:
#    web:
#      exposure:
#        include: gateway

logging:
  level:
    web: info
    ltd.fdsa: info
  pattern:
    # console: "%msg%n"
    console: '[%highlight(%-4level)] %msg%n'

project:
  minio:
    url: http://10.168.4.132:9000
    accesskey: minioadmin
    secretKey: minioadmin
#
#
#filters:
#  # redis限流，filter名称必须是RequestRateLimiter
#  - name: RequestRateLimiter
#    args:
#      # 使用SpEL名称引用Bean，与上面新建的RateLimiterConfig类中的bean的name相同
#      key-resolver: '#{@remoteAddrKeyResolver}'
#      # 每秒最大访问次数
#      redis-rate-limiter.replenishRate: 20
#      # 令牌桶最大容量
#      redis-rate-limiter.burstCapacity: 20
#
#
#  # 熔断降级配置
#  - name: Hystrix
#    args:
#      name: default
#      fallbackUri: 'forward:/defaultfallback'
#
## hystrix 信号量隔离，3秒后自动超时
#hystrix:
#  command:
#    default:
#      execution:
#      isolation:
#        strategy: SEMAPHORE
#        thread:
#        timeoutInMilliseconds: 3000
#  shareSecurityContext: true